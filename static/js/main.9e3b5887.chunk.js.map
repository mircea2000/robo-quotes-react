{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/footer/footer.component.jsx","components/go-to-top/go-to-top.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","monster","author","alt","src","id","en","substring","href","rating","CardList","total","search","monsters","map","key","Footer","icon","faHeart","React","Component","library","add","faAngleUp","GoToTop","ref","this","myRef","App","state","searchField","fetch","then","response","json","quotes","setState","filteredMonsters","filter","toLowerCase","includes","length","type","placeholder","onChange","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gWAEaA,G,kBAAO,SAAAC,GAEhB,OACI,yBAAKC,UAAU,QACX,4BAAKD,EAAME,QAAQC,QACnB,yBAAKF,UAAU,aACX,yBAAKG,IAAI,QAAQC,IAAG,+BAA0BL,EAAME,QAAQI,GAAxC,gBAExB,2BAAIN,EAAME,QAAQK,GAAGC,UAAU,EAAG,IAAI,4BAAQC,KAAK,KAAKR,UAAU,WAA5B,UACtC,0BAAMA,UAAmC,MAAxBD,EAAME,QAAQQ,OAAiB,GAAK,YAAqC,MAAxBV,EAAME,QAAQQ,OAAiBV,EAAME,QAAQQ,OAAS,gBCPvHC,EAAW,SAAAX,GACtB,OACE,6BACE,yBAAKC,UAAU,eAA+B,IAAhBD,EAAMY,MAAc,8BAAOZ,EAAMY,OAAgB,KAA/E,iBAAqH,KAAjBZ,EAAMa,OAAgB,QAAU,QAAQ,8BAAwB,KAAjBb,EAAMa,OAAgBb,EAAMa,OAAU,KACzL,yBAAKZ,UAAU,aACZD,EAAMc,SAASC,KAAI,SAAAb,GAAO,OACzB,kBAAC,EAAD,CAAMc,IAAKd,EAAQI,GAAIJ,QAASA,U,sBCL7Be,EAAb,iLAEQ,OACI,yBAAKhB,UAAU,UAAf,aACc,8BAAO,kBAAC,IAAD,CAAiBiB,KAAMC,OAD5C,qDAHZ,GAA4BC,IAAMC,W,WCElCC,EAAQC,IAAIC,KAEL,IAAMC,EAAb,iLAEQ,OACI,6BACI,yBAAKxB,UAAU,UAAUyB,IAAKC,KAAKC,OAAO,kBAAC,IAAD,CAAiBV,KAAK,mBAJhF,GAA6BE,IAAMC,WCwDpBQ,E,YAvDX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACThB,SAAW,GAGXiB,YAAc,IANR,E,iFAWM,IAAD,OAEfC,MAAM,uDACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAG,EAAKC,SAAS,CAACvB,SAAUsB,S,+BAGlC,IAAD,SAE6BT,KAAKG,MAA/BhB,EAFH,EAEGA,SAAUiB,EAFb,EAEaA,YACZO,EAAmBxB,EAASyB,QAAO,SAAArC,GAAO,OAC5CA,EAAQC,OAAOqC,cAAcC,SAASV,EAAYS,gBAClDtC,EAAQK,GAAGiC,cAAcC,SAASV,EAAYS,kBAElD,OAAIb,KAAKG,MAAMhB,SAAS4B,OAAS,EAEzB,yBAAKzC,UAAU,OACX,4BAAQA,UAAU,cACd,6BAAK,yBAAKA,UAAU,QAAf,QAA2B,yCAC5B,2BACI0C,KAAK,SACLC,YAAY,mBACZC,SAAU,SAAAC,GAAC,OAEP,EAAKT,SAAS,CAAEN,YAAae,EAAEC,OAAOC,aAKtD,kBAAC,EAAD,CAAUlC,SAAUwB,EAAkB1B,MAAO0B,EAAiBI,OAAQ7B,OAAQkB,IAC9E,kBAAC,EAAD,MAEA,kBAAC,EAAD,OAKR,yBAAK9B,UAAU,UACX,yBAAKI,IAAI,2DAA2DD,IAAI,U,GAlDtEgB,IAAMC,WCGJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.9e3b5887.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.styles.scss';\r\nexport const Card = props => {\r\n    // var shortTxt = props.monster.en;\r\n    return (\r\n        <div className=\"card\">\r\n            <h1>{props.monster.author}</h1>\r\n            <div className=\"imgHolder\">\r\n                <img alt=\"Quote\" src={`https://robohash.org/${props.monster.id}?set=set3`}/>\r\n            </div>\r\n            <p>{props.monster.en.substring(0, 60)}<button href=\"# \" className=\"cardBtn\">[...]</button></p>\r\n            <span className={props.monster.rating != null ? '' : 'notRated'}>{props.monster.rating != null ? props.monster.rating : 'Not Rated'}</span>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport \"./card-list.styles.scss\";\r\nimport { Card } from \"./../card/card.component\";\r\n\r\nexport const CardList = props => {\r\n  return (\r\n    <div>\r\n      <div className=\"totalQuotes\">{props.total !== 0 ? <span>{props.total}</span> : \"No\" } Quotes Found {props.search !== \"\" ? 'For: ' : \"Total\"}<span>{props.search !== \"\" ? props.search  : \"\"}</span></div>\r\n      <div className=\"card-list\">\r\n        {props.monsters.map(monster => (\r\n          <Card key={monster.id} monster={monster} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport \"./footer.style.scss\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHeart } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport class Footer extends React.Component {\r\n    render(){\r\n        return (\r\n            <div className=\"footer\">\r\n                Made with <span ><FontAwesomeIcon icon={faHeart} /></span> by Mirch~Pirch in Phoenix, AZ using React.Js\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './go-to-top.styles.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faAngleUp } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(faAngleUp)\r\n\r\nexport class GoToTop extends React.Component {\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div className=\"gotoTop\" ref={this.myRef}><FontAwesomeIcon icon=\"angle-up\"></FontAwesomeIcon></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n// export default Foo;","import React from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {Footer} from './components/footer/footer.component';\nimport {GoToTop} from './components/go-to-top/go-to-top.component';\n// import {Card} from './components/card/card.component';\n\n\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            monsters : [\n\n            ],\n            searchField : '',\n            \n        }\n    }\n    \n    componentDidMount(){\n        // fetch('https://jsonplaceholder.typicode.com/users')\n        fetch('https://programming-quotes-api.herokuapp.com/quotes')\n        .then(response => response.json())\n        .then(quotes=> this.setState({monsters: quotes}))\n    }\n  \n    render() {\n        // Destruct\n        const { monsters, searchField } = this.state;\n        const filteredMonsters = monsters.filter(monster => \n            monster.author.toLowerCase().includes(searchField.toLowerCase()) ||\n            monster.en.toLowerCase().includes(searchField.toLowerCase())\n        )\n        if (this.state.monsters.length > 0) {\n            return (\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <div><div className=\"logo\">Robo <span>QUOTES</span></div>\n                            <input \n                                type=\"search\"\n                                placeholder=\"Search For Quote\"  \n                                onChange={e => \n                                    // Coments lesson 22\n                                    this.setState({ searchField: e.target.value })\n                                }\n                            />\n                        </div>\n                    </header>\n                    <CardList monsters={filteredMonsters} total={filteredMonsters.length} search={searchField}/>\n                    <GoToTop />\n\n                    <Footer/>\n                </div>\n            )\n        }\n        return (\n            <div className=\"loader\">\n                <img src=\"https://samherbert.net/svg-loaders/svg-loaders/audio.svg\" alt=\"\" />\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}